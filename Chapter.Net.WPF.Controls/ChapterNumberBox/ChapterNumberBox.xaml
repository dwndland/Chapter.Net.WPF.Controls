<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:controls="clr-namespace:Chapter.Net.WPF.Controls">

    <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
    <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
    <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />

    <Style TargetType="{x:Type controls:UpDownButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:UpDownButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="arrow"
                              Margin="2"
                              HorizontalAlignment="Center"
                              Fill="Black"
                              StrokeThickness="1" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Direction" Value="Up">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,4 L 4,0 L 8,4 L 0,4" />
                        </Trigger>
                        <Trigger Property="Direction" Value="Down">
                            <Setter TargetName="arrow" Property="Data" Value="M 0,0 L 4,4 L 8,0 L 0,0" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="arrow" Property="Fill" Value="Gray" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="arrow" Property="Fill" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type controls:NumberResetButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:NumberResetButton}">
                    <Border Width="18" Background="{TemplateBinding Background}">
                        <Grid Width="16">
                            <Path Width="10.5"
                                  Height="10.5"
                                  HorizontalAlignment="Center"
                                  VerticalAlignment="Center"
                                  Data="M6.2500001,0.25 L9.75,0.25 9.75,6.25 15.75,6.25 15.75,9.75 9.75,9.75 9.75,15.75 6.2500001,15.75 6.2500001,9.75 0.25,9.75 0.25,6.25 6.2500001,6.25 z"
                                  Fill="{TemplateBinding Foreground}"
                                  RenderTransformOrigin="0.5,0.5"
                                  Stretch="Fill"
                                  Stroke="White"
                                  StrokeThickness="0.5">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="45" />
                                </Path.RenderTransform>
                            </Path>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0.029" Color="#FFEAF6FD" />
                                        <GradientStop Offset="0.496" Color="#FFD7EFFC" />
                                        <GradientStop Offset="0.504" Color="#FFBDE6FD" />
                                        <GradientStop Offset="0.971" Color="#FFA9DAF5" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0.5" Color="#FFC2E4F6" />
                                        <GradientStop Offset="0.507" Color="#FFA9D9F2" />
                                        <GradientStop Offset="0.978" Color="#FF95CEEC" />
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="{x:Type controls:NumberUnitLabel}">
        <Setter Property="Padding" Value="0,0,2,0" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type controls:NumberCheckBox}">
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type controls:ChapterNumberBox}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
        <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="AllowDrop" Value="true" />
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
        <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ChapterNumberBox}">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <DockPanel>
                            <controls:NumberResetButton x:Name="PART_ResetButton"
                                                        AutomationProperties.AutomationId="CUI_ResetButton"
                                                        DockPanel.Dock="{TemplateBinding ResetButtonPosition}"
                                                        Visibility="Collapsed" />

                            <controls:NumberCheckBox x:Name="PART_CheckBox"
                                                     VerticalAlignment="Center"
                                                     AutomationProperties.AutomationId="CUI_CheckBox"
                                                     DockPanel.Dock="{TemplateBinding CheckBoxPosition}"
                                                     IsChecked="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                     Visibility="Collapsed" />

                            <StackPanel x:Name="PART_UpDownButtons"
                                        VerticalAlignment="Center"
                                        DockPanel.Dock="{TemplateBinding UpDownButtonsPosition}"
                                        Visibility="Collapsed">
                                <controls:UpDownButton x:Name="PART_UpButton"
                                                       AutomationProperties.AutomationId="CUI_UpButton"
                                                       Direction="Up"
                                                       Focusable="False" />
                                <controls:UpDownButton x:Name="PART_DownButton"
                                                       AutomationProperties.AutomationId="CUI_DownButton"
                                                       Direction="Down"
                                                       Focusable="False" />
                            </StackPanel>

                            <controls:NumberUnitLabel x:Name="PART_UnitLabel"
                                                      VerticalAlignment="Center"
                                                      AutomationProperties.AutomationId="CUI_UnitLabel"
                                                      Content="{TemplateBinding Unit}"
                                                      DockPanel.Dock="{TemplateBinding UnitPosition}" />

                            <TextBox x:Name="PART_TextBox"
                                     Padding="{TemplateBinding Padding}"
                                     HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     BorderThickness="0"
                                     IsReadOnly="{TemplateBinding IsReadOnly}" />

                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasResetButton" Value="True">
                            <Setter TargetName="PART_ResetButton" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="HasCheckBox" Value="True">
                            <Setter TargetName="PART_CheckBox" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="Unit" Value="{x:Null}">
                            <Setter TargetName="PART_UnitLabel" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="DisableIfChecked" />
                                <Condition Property="IsChecked" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="CheckBoxBehavior" Value="EnableIfChecked" />
                                <Condition Property="IsChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_UnitLabel" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_TextBox" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </MultiTrigger>
                        <Trigger Property="CanStepUp" Value="False">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanStepDown" Value="False">
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="CanReset" Value="False">
                            <Setter TargetName="PART_ResetButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="Buttons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="UpDownBehavior" Value="ArrowsAndButtons">
                            <Setter TargetName="PART_UpDownButtons" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsReadOnly" Value="True">
                            <Setter TargetName="PART_UpButton" Property="IsEnabled" Value="False" />
                            <Setter TargetName="PART_DownButton" Property="IsEnabled" Value="False" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>